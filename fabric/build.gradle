plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property "version", project.version
    inputs.property "compatible_versions", rootProject.compatible_versions_fabric_format

    filesMatching("fabric.mod.json") {
        expand "version": project.version, "compatible_versions": rootProject.compatible_versions_fabric_format
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xplugin:Manifold']
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
